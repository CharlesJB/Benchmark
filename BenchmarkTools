#!/bin/bash

# General tools

BenchmarkTools_extractFileInfos(){
	index=0
	while read line
	do
		echo $line
		words=( $line )
		fileFormats[$index]=${words[0]}
		treatmentFiles[$index]=${words[1]}
		controlFiles[$index]=${words[2]}		
		index=$((index+1))
	done < $fileName
}

BenchmarkTools_prepareSamples(){
	DarkFishTechnology_runCommand 0 "mkdir Samples"

	if [ ${fileFormats[0]} = "txt" ]
	then
		BenchmarkTools_extractFileInfos
	fi

	index=0
	for i in ${treatmentFiles[@]}
	do
		BenchmarkTools_prepareSample "${treatmentFiles[$index]}"
		BenchmarkTools_prepareSample "${controlFiles[$index]}"
		index=$((index+1))
	done
}

BenchmarkTools_prepareSample(){
	filename=$1

	sampleName=Samples/$(basename $filename)
	DarkFishTechnology_runCommand 0 "ln -s ../../$filename $sampleName"
	randomFile=$(DarkFishTechnology_generateCacheEntry)	
	DarkFishTechnology_runCommand 0 "mv $sampleName $randomFile"
	DarkFishTechnology_linkCacheEntry $randomFile Samples "$(basename $filename)"
}

# MACS tools

BenchmarkTools_MACS_Analysis(){
	DarkFishTechnology_runCommand 0 "mkdir Results"
	
	commandResults=""

	index=0
	fileNumber=0
	for tmp in ${treatmentFiles[@]}
	do
		if [ ${controlFiles[$index]} != "" ]
		then
			commandResults="macs14 -t ../${treatmentFiles[$index]} -c ../${controlFiles[$index]} $options -n Results/$output"	
		else
			commandResults="macs14 -t ../${treatmentFiles[$index]} $options -n Results/$output"	
		fi
		processorNumber=$((fileNumber%processors))
		Results[$processorNumber]=${Results[$processorNumber]}$commandResults
	done

	DarkFishTechnology_runGroupCommands "Results"
}

BenchmarkTools_convertSamples(){
	program=$1
	DarkFishTechnology_runCommand 0 "( mkdir FormatedSamples ) ; "

	index=0
	fileNumber=0
	for file in ${treatmentFiles[@]}
	do
		processorNumber=$(($fileNumber%$processors))
		commandTreatment=$("BenchmarkTools_get"$program"SamplesConvertCommand" ${treatmentFiles[$index]} ${fileFormats[$index]})
		FormatedSamples[$processorNumber]=${FormatedSamples[$processorNumber]}$commandTreatment
		fileNumber=$(($fileNumber+1))

		if [ ${controlFiles[$index]} != "" ]
		then
			processorNumber=$(($fileNumber%$processors))
			commandControl=$(BenchmarkTools_getSISSRsSamplesConvertCommand ${controlFiles[$index]} ${fileFormats[$index]})
			FormatedSamples[$processorNumber]=${FormatedSamples[$processorNumber]}$commandControl
			fileNumber=$((fileNumber+1))
		fi

		index=$((index+1))
	done

	DarkFishTechnology_runGroupCommands "FormatedSamples"
}

# SISSRs tools

BenchmarkTools_getSISSRsSamplesConvertCommand(){
	sampleFileName=Samples/$(basename $1)
	sampleFileFormat=$2
	randomFile=$(DarkFishTechnology_generateCacheEntry)
	
	if [ sampleFileFormat = "eland" ]
	then
		tmpName=${sampleFileName%.*}.tmp
		convertCommand="( cat $sampleFileName | sed -e 's/Homo_sapiens.NCBI36.42.dna.chromosome.//g' | sed -e 's/.fa//g' > $tmpName ) ; "
		convertCommand=$convertCommand"( eland2bed $tmpName | awk '{\$5=0;\$6=\$4;\$4=0}1' > $randomFile ) ; "
		convertCommand=convertCommand" ( rm $tmpName ) ; "
	else
		convertCommand=$convertCommand"( awk '{\$5=0;\$6=\$4;\$4=0}1' $sampleFileName > $randomFile) ; "
	fi

	toAdd="( DarkFishTechnology_linkCacheEntry $randomFile FormatedSamples Formated_$(basename $1)) ; "
	convertCommand=$convertCommand$toAdd

	echo $convertCommand
}

BenchmarkTools_getRawSISSRsResults(){
	DarkFishTechnology_runCommand 0 "mkdir RawResults"
	commandRaw=""

	index=0
	for tmp in ${treatmentFiles[@]}
	do
		randomFile=$(DarkFishTechnology_generateCacheEntry)
		formatedTreatment=FormatedSamples/Formated_$(basename ${treatmentFiles[$index]})
		if [ $controlFiles[$index] != "" ]
		then
			formatedControl=FormatedSamples/Formated_$(basename ${controlFiles[$index]})
			commandRaw="( sissrs.pl -i $formatedTreatment -b $formatedControl -o $randomFile $options ) ; "
		else
			commandRaw="( sissrs.pl -i $formatedTreatment -o $randomFile $options ) ; "
		fi
		processorNumber=$(($index%$processors))
		commandRaw=$commandRaw"( DarkFishTechnology_linkCacheEntry $randomFile RawResults "$(basename ${treatmentFiles[$index]%.*}).raw") ; "
		RawResults[$processorNumber]=${RawResults[$processorNumber]}$commandRaw
		index=$((index+1))
	done
	
	DarkFishTechnology_runGroupCommands "RawResults"
}

BenchmarkTools_trimSISSRsResults(){
	DarkFishTechnology_runCommand 0 "mkdir TrimmedResults"

	commandTrim1=""
	commandTrim2=""
	fileNumber=0
	for file in $(ls RawResults/)
	do 
		randomFile1=$(DarkFishTechnology_generateCacheEntry)
		command1="( tail -n +58 RawResults/$file | head -n -1 > $randomFile1) ;"
		command1=$command1"( DarkFishTechnology_linkCacheEntry $randomFile1 TrimmedResults Peaks_${file%.*}.txt ) ;"
		processorNumber$(($fileNumber%$processors))
		TrimmedResults[$processorNumber]=${TrimmedResults[$processorNumber]}$command1
		fileNumber=$((fileNumber+1))

		randomFile2=$(DarkFishTechnology_generateCacheEntry)
		command2="( sed -n 23,55p RawResults/$file > $randomFile2) ; "
		command2=$command2"( DarkFishTechnology_linkCacheEntry $randomFile2 TrimmedResults Summary_${file%.*}.txt ) ;"
		processorNumber$(($fileNumber%$processors))
		TrimmedResults[$processorNumber]=${TrimmedResults[$processorNumber]}$command2
		fileNumber=$((fileNumber+1))
	done
	
	DarkFishTechnology_runGroupCommands "TrimmedResults"
}

